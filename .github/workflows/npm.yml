# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [15.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Bump version and push tag
      id: tag_version
      uses: mathieudutour/github-tag-action@v5.3
      with:
          github_token: ${{ secrets.GITHUBACCESS }}

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build --if-present
    - name: Get package version
      id: vars
      shell: bash
      run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=pkg_version::$(node -e "console.log(require('./package.json').version);")"
    - name: Add & Commit
      uses: EndBug/add-and-commit@v4.2.0
      with:
          add: "dist"
          force: true
          message: "Built ${{ steps.vars.outputs.sha_short }}"
          ref: "release/v${{ steps.vars.outputs.pkg_version }}"
          tag: "v${{ steps.vars.outputs.pkg_version }}"
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUBACCESS }} # Provided by Github Actions
    - run: npm test

  package:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 15.x
        uses: actions/setup-node@v1
        with:
          node-version: 15.x
      - run: npm ci
      - run: npm version prerelease --preid=ci-$GITHUB_RUN_ID --no-git-tag-version
      - run: npm pack

#      - name: publish to artifactory
#        uses: advancedcsg-open/action-jfrog-cli@master
#        with:
#          url: 'https://artifactorygcp.jfrog.io/'
#          credentials type: 'apikey'
#          apikey: ${{ secrets.JF_ARTIFACTORY_APIKEY }}
#          args: u "dist/*" "/test/repo/path/" --recursive=true --build-name=mytestingapp

      - name: Connect to Artifactory
        uses: Deepakanandrao/jfrog-cli@v3
        with:
        cli_cmd: |                                      # commands to be excuted
         'jfrog rt ping'
        env:  
          SERVER_URL: 'https://artifactorygcp.jfrog.io/'           # Required (e.g. https://jfrogy.com/artifactory)
          ACCESS_TYPE: api-key         # Required  (username-password, access-token, api-key)
          API_KEY: ${{ secrets.JF_ARTIFACTORY_APIKEY }}

###      - run: npm publish
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
            name: package
            path: "*.tgz"


  publish:
    name: "Publish to GitHub Packages"
    needs: [package]
    runs-on: ubuntu-latest
    if: github.repository_owner == 'gulshansethi'
    steps:
    - name: Upload
      uses: actions/download-artifact@v2
      with:
          name: package
    - uses: actions/setup-node@v1
      with:
        node-version: 14.x
        registry-url: https://npm.pkg.github.com/
        scope: "@gulshansethi"
    - run: echo "registry=https://npm.pkg.github.com/@gulshansethi" >> .npmrc
    - run: npm publish $(ls *.tgz) --access public
      env:
        NODE_AUTH_TOKEN: ${{secrets.GITHUBACCESS}}